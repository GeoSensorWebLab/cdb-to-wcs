#!/usr/bin/env ruby

require "bundler/setup"
require "geoserver"
require "json"
require "uri"

if ARGV.count < 2
  puts "Usage: geoserver-setup <temp tiles path> <URL of GeoServer>"
  puts "Include HTTP Basic auth parameters in the URL."
  exit 1
end

TILES_PATH     = ARGV[0]
GEOSERVER_URI  = ARGV[1]

# Basic validation of input
if !Dir.exists?(TILES_PATH)
  puts "path to final tiles directory does not exist"
  exit 1
end

begin
  GEOSERVER = GeoServer::GeoServer.new(GEOSERVER_URI)
rescue URI::InvalidURIError => e
  puts "Invalid GeoServer URL: #{e}"
  exit 1
end

# Count number of input files
input_files = Dir.glob(TILES_PATH + "/*")

if input_files.length == 0
  puts "No input files in #{TILES_PATH}, exiting now."
  exit 1
else
  puts "Found #{input_files.count} input files."
end

# Test connection to GeoServer
test_response = GEOSERVER.get("/geoserver")

if test_response.code.to_i < 400
  puts "HTTP Check OK"
else
    puts "HTTP Client Error"
    puts test_response.body
    exit 1
end

# Check login to GeoServer
login_response = GEOSERVER.get("/geoserver/rest/settings")
auth_response_code = login_response.code.to_i

if auth_response_code == 401
  puts "Cannot authenticate to GeoServer, check the Basic Authentication."
  exit 1
elsif auth_response_code >= 400
  puts "HTTP Error authenticating to GeoServer: #{auth_response_code}"
  exit 1
end

# Create a new workspace
# Based on current unix epoch
workspace = GEOSERVER.create_workspace({
  name: "cdb-#{Time.new.to_i}"
})

# Function to clean up the workspace we just created in case something in the script fails later.
def delete_workspace
  begin
    workspace.delete
  rescue e
    puts "Delete workspace failed!"
  end
end

# For each input file, create a new raster coverage store
base_geoserver_url = GEOSERVER.base_url

input_files.sort.chunk { |file| File.basename(file).split('-')[0..-3].join('-') }.each do |group, files|
  puts "GROUP: #{group}"
  puts "FILES: #{files}"

  coverages = files.collect do |file|
    puts "Readying import for #{file}"
    basename = File.basename(file, ".vrt")

    coverage_store = GEOSERVER.create_coveragestore(workspace.path, {
      name: basename,
      description: basename,
      type: "VRT",
      url: "file:#{file}",
      workspace: {
        name: workspace[:name],
        href: "#{workspace.path}.json"
      }
    })
    puts "Created coverage store."

    coverage = GEOSERVER.create_coverage(coverage_store.path, {
      description: "Generated from VRT",
      keywords: { string: [basename, "WCS", "VRT"] },
      metadata: {
        entry: {
          "@key": "dirName",
          "$": "#{basename}_#{basename}"
        }
      },
      name: basename,
      namespace: {
        href: "#{workspace.path}.json",
        name: workspace[:name]
      },
      nativeCoverageName: basename,
      nativeFormat: "VRT",
      nativeName: basename,
      store: {
        "@class": "coverageStore",
        href: "#{coverage_store.path}.json",
        name: "#{workspace[:name]}:#{basename}"
      },
      title: basename
    })

    puts "Created coverage. #{coverage.path} #{coverage[:name]}"
    coverage
  end

  puts ""
end
