#!/usr/bin/env ruby

require "bundler/setup"
require "cdb"
require "cdbtool"
require "json"
require "mixlib/shellout"

class CDBMosaic < CDBTool::CLI
  def help_info
    "Mosaic coverages in a CDB using Virtual Dataset (VRT)"
  end
end

# Only create VRTs for these datasets
ALLOWED_DATASETS = [
  "001_Elevation",
  "004_Imagery"
]

VRT_UREF_DIR    = "vrt-uref"
VRT_GEOCELL_DIR = "vrt-geocell"
VRT_FINAL_DIR   = "vrt-final"

$tool = CDBMosaic.new
$tool.parse(ARGV)
$logger    = $tool.logger
$benchmark = $tool.file_logger

cdb = CDB::CDB.new($tool.cdb_path)

# Create temp dirs for virtual files
merged_dir  = $tool.cdb_path + "_temp"
uref_dir    = File.join(merged_dir, VRT_UREF_DIR)
geocell_dir = File.join(merged_dir, VRT_GEOCELL_DIR)
final_dir   = File.join(merged_dir, VRT_FINAL_DIR)
CDBTool.mkdirp(merged_dir)
CDBTool.mkdirp(uref_dir)
CDBTool.mkdirp(geocell_dir)
CDBTool.mkdirp(final_dir)

# Return true if `files` are of a lossy type (JPG, JP2, VRT of JP2s, etc)
# or false if lossless type (TIF, VRT of TIFs, etc)
# If input files are of different types then weird things might happen.
def gdal_lossy_files?(files)
  extension = File.extname(files.at(0))

  case extension
  when ".vrt"
    # 3 bands in output will be interpreted as imagery.
    c = Mixlib::ShellOut.new("gdalinfo -json #{files.at(0)}")
    $logger.debug(c.command)
    c.run_command
    output = JSON.parse(c.stdout)
    output["bands"].count == 3 ? true : false
  when ".tif"
    false
  when ".jp2"
    true
  else
    false
  end
end

# Merge input_files into output_file using GDAL
# Don't do anything if output_file already exists
def gdal_buildvrt(input_files, output_file)
  return nil if input_files.length == 0

  command = if gdal_lossy_files?(input_files)
    "gdalbuildvrt #{output_file} #{input_files.join(" ")}"
  else
    "gdalbuildvrt -srcnodata 0 -vrtnodata 0 #{output_file} #{input_files.join(" ")}"
  end

  merge = Mixlib::ShellOut.new(command, live_stdout: $stdout, live_stderr: $stderr)

  if File.exists?(output_file)
    puts "Output exists, skipping buildvrt command."
    output_file
  else
    $logger.debug(command)
    merge.run_command
    if File.exist?(output_file)
      $benchmark.info("#{output_file},#{File.size(output_file)},#{merge.execution_time}s")
      output_file
    else
      nil
    end
  end
end

# Group by datasets (collecting datasets from different geocells together),
# then break down into sub-groups based on Component Selectors and UREFs
cdb.datasets.select { |x| ALLOWED_DATASETS.include?(x.id) }
  .sort_by { |x| x.id }
  .chunk { |x| x.id }
  .each { |group|
  dataset_id = group.at(0)
  datasets   = group.at(1)

  puts dataset_id

  # invert the tree and work up from the files. This allows easier selection by
  # CS.

  dataset_files = datasets.collect { |dataset|
    dataset.highest_lod.urefs.collect { |uref|
      uref.entries.collect { |e| CDB::CDBFile.new(e) }.flatten
    }.flatten
  }.flatten

  # Group by component selector, geocell, uref (in reverse merge order)
  grouped_files = dataset_files.reduce({}) do |memo, file|
    geocell = file.fields.at(0)
    cs1     = file.fields.at(2)
    cs2     = file.fields.at(3)
    uref    = file.fields.at(5)

    memo["#{cs1}-#{cs2}"] ||= {}
    memo["#{cs1}-#{cs2}"][geocell] ||= {}
    memo["#{cs1}-#{cs2}"][geocell][uref] ||= []
    memo["#{cs1}-#{cs2}"][geocell][uref].push(file)
    memo
  end

  grouped_files.each do |cs_group, geocells|

    geocell_rasters = geocells.collect { |geocell, urefs|

      uref_rasters = urefs.collect { |uref, files|
        rasters = files.map(&:path)
        # Merge files with same component selector, same geocell, same uref
        puts "Merging RREFs"
        outfile_name = [dataset_id, cs_group, geocell, uref].join("-")
        gdal_buildvrt(rasters, File.join(uref_dir, outfile_name + ".vrt"))
      }.compact

      # Merge files with same component selector, same geocell
      puts "Merging UREFs"
      outfile_name = [dataset_id, cs_group, geocell].join("-")
      gdal_buildvrt(uref_rasters, File.join(geocell_dir, outfile_name + ".vrt"))
    }.compact

    # Merge files with same component selector
    puts "Merging GeoCells"
    outfile_name = [dataset_id, cs_group].join("-")
    gdal_buildvrt(geocell_rasters, File.join(final_dir, outfile_name + ".vrt"))
  end
  puts ""
}

puts "Output in #{final_dir}"
