#!/usr/bin/env ruby

require "bundler/setup"
require "cdb"
require "cdbtool/cli"
require "mixlib/shellout"
require "fileutils"

class CDBMosaic < CDBTool::CLI
  def help_info
    "Mosaic coverages in a CDB"
  end
end

mosaic = CDBMosaic.new
options = mosaic.parse(ARGV)

cdb = CDB::CDB.new(mosaic.cdb_path)

# Create temp dir for merged mosaics
merged_dir = mosaic.cdb_path + "_temp"

# Create a directory, but do nothing if it already exists
def mkdirp(dir)
  if !Dir.exists?(dir)
    Dir.mkdir(dir)
  end
end

mkdirp(merged_dir)

# Create index
cdb.datasets.each do |dataset|
  puts dataset.geocell + "-" + dataset.id

  # pick highest LOD, or LC if only LOD
  all_lods = dataset.lods.sort_by { |lod| lod.id }
  lod = all_lods[-2] || all_lods[-1]

  # mosaic files in each UREF
  uref_geotiffs = []
  uref_jp2ks = []

  lod.urefs.each do |uref|
    puts "\tUREF: #{uref.id}"
    uref_group = [dataset.geocell, dataset.id, lod.id, uref.id].join("-")
    output = File.join(merged_dir, "UREFs", uref_group + ".tif")
    mkdirp(File.join(merged_dir, "UREFs"))

    # check for GeoTIFFs or JP2000 files
    geotiffs = uref.entries("/*.tif")
    if geotiffs.count > 0
      puts "\t\tgeotiffs: #{geotiffs.count}"

      merge = Mixlib::ShellOut.new("gdal_merge.py -o #{output} -n 0 #{geotiffs.join(" ")}")
      uref_geotiffs.push(output)

      if File.exists?(output)
        puts "\t\tMerged file already exists, skipping."
      else
        merge.run_command
        puts merge.stdout
        puts merge.stderr
      end
    end

    jp2ks = uref.entries("/*.jp2")
    if jp2ks.count > 0
      puts "\t\tjpeg2000s: #{jp2ks.count}"

      merge = Mixlib::ShellOut.new("gdal_merge.py -o #{output} -n 0 #{jp2ks.join(" ")}")
      uref_jp2ks.push(output)

      if File.exists?(output)
        puts "\t\tMerged file already exists, skipping."
      else
        merge.run_command
        puts merge.stdout
        puts merge.stderr
      end
    end

    if geotiffs.count == 0 && jp2ks.count == 0
      puts "\t\tNo GeoTIFFs or JPEG2000s found."
    end
  end

  # Mosaic every UREF under an LOD into a single image
  # (Does this work if both geotiffs and jp2s are present?)
  dataset_group = [dataset.geocell, dataset.id, lod.id].join("-")
  dataset_output = File.join(merged_dir, "datasets", dataset_group + ".tif")
  mkdirp(File.join(merged_dir, "datasets"))

  if uref_geotiffs.count == 1
    # If only one TIFF in an LOD, then link it instead to save space
    FileUtils.ln(uref_geotiffs[0], dataset_output)
  elsif uref_geotiffs.count > 1
    puts "\t\tmerging geotiffs: #{uref_geotiffs.count}"

    merge = Mixlib::ShellOut.new("gdal_merge.py -o #{dataset_output} -n 0 #{uref_geotiffs.join(" ")}")

    if File.exists?(dataset_output)
        puts "\t\tMerged file already exists, skipping."
      else
        merge.run_command
        puts merge.stdout
        puts merge.stderr
      end
  end

  if uref_jp2ks.count == 1
    # If only one TIFF in an LOD, then link it instead to save space
    FileUtils.ln(uref_jp2ks[0], dataset_output)
  elsif uref_jp2ks.count > 1
    puts "\t\tmerging jp2s: #{uref_jp2ks.count}"

    merge = Mixlib::ShellOut.new("gdal_merge.py -o #{dataset_output} -n 0 #{uref_jp2ks.join(" ")}")

    if File.exists?(dataset_output)
        puts "\t\tMerged file already exists, skipping."
      else
        merge.run_command
        puts merge.stdout
        puts merge.stderr
      end
  end
end

