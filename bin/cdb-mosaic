#!/usr/bin/env ruby

require "bundler/setup"
require "cdb"
require "cdbtool"
require "mixlib/shellout"
require "fileutils"

class CDBMosaic < CDBTool::CLI
  def help_info
    "Mosaic coverages in a CDB"
  end
end

mosaic = CDBMosaic.new
options = mosaic.parse(ARGV)

cdb = CDB::CDB.new(mosaic.cdb_path)

# Create temp dir for merged mosaics
merged_dir = mosaic.cdb_path + "_temp"

# Create a directory, but do nothing if it already exists
def mkdirp(dir)
  if !Dir.exists?(dir)
    Dir.mkdir(dir)
  end
end

# Create a linked file to save space when only a single file is mosaiced
def link_output(input_file, output_file)
  if File.exists?(input_file) && !File.exists?(output_file)
    puts "Linking source #{input_file} to #{output_file}"
    FileUtils.ln(input_file, output_file)
  end
end

# Merge input_files into output_file using GDAL
# Don't do anything if output_file already exists
def gdal_merge(input_files, output_file)
  return nil if input_files.length == 0
  return link_output(input_files[0], output_file) if input_files.length == 1
  merge = Mixlib::ShellOut.new("gdal_merge.py -o #{output_file} -n 0 #{input_files.join(" ")}")

  if !File.exists?(output_file)
    merge.run_command
    puts merge.stdout
    puts merge.stderr
  end
end

mkdirp(merged_dir)

cdb.datasets.each do |dataset|
  puts dataset.geocell + "-" + dataset.id

  # pick highest LOD, or LC if only LOD
  lod = dataset.highest_lod

  # mosaic files in each UREF
  uref_geotiffs = []
  uref_jp2ks = []

  lod.urefs.each do |uref|
    puts "\tUREF: #{uref.id}"
    uref_group = [dataset.geocell, dataset.id, lod.id, uref.id].join("-")
    output = File.join(merged_dir, "UREFs", uref_group + ".tif")
    mkdirp(File.join(merged_dir, "UREFs"))

    # check for GeoTIFFs or JP2000 files
    geotiffs = uref.entries("/*.tif")
    if geotiffs.count > 0
      puts "\t\tgeotiffs: #{geotiffs.count}"

      gdal_merge(geotiffs, output)
      uref_geotiffs.push(output)
    end

    jp2ks = uref.entries("/*.jp2")
    if jp2ks.count > 0
      puts "\t\tjpeg2000s: #{jp2ks.count}"

      gdal_merge(jp2ks, output)
      uref_jp2ks.push(output)
    end

    if geotiffs.count == 0 && jp2ks.count == 0
      puts "\t\tNo GeoTIFFs or JPEG2000s found."
    end
  end

  # Mosaic every UREF under an LOD into a single image
  # (Does this work if both geotiffs and jp2s are present?)
  dataset_group = [dataset.geocell, dataset.id].join("-")
  dataset_output = File.join(merged_dir, "datasets", dataset_group + ".tif")
  mkdirp(File.join(merged_dir, "datasets"))

  gdal_merge(uref_geotiffs, dataset_output)
  gdal_merge(uref_jp2ks, dataset_output)
end

# Join datasets from different GeoCells
final_dir = File.join(merged_dir, "final")
mkdirp(final_dir)

cdb.datasets.sort { |a,b| a.id <=> b.id }.chunk { |dataset| dataset.id }.each do |group|
  dataset_id = group.shift
  final_output = File.join(final_dir, dataset_id + ".tif")

  input_files = group.shift.collect do |dataset|
    dataset_group = [dataset.geocell, dataset.id].join("-")
    File.join(merged_dir, "datasets", dataset_group + ".tif")
  end

  gdal_merge(input_files, final_output)
end

puts "Output in #{final_dir}"
