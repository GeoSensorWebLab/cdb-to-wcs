#!/usr/bin/env ruby

require "bundler/setup"
require "cdb"
require "cdbtool"
require "mixlib/shellout"

class CDBMosaic < CDBTool::CLI
  def help_info
    "Mosaic coverages in a CDB"
  end
end

$LOGFILE = "run.log"
def log(msg)
  IO.write($LOGFILE, "#{Time.now}, #{msg}\n", mode: 'a')
end

mosaic = CDBMosaic.new
options = mosaic.parse(ARGV)

cdb = CDB::CDB.new(mosaic.cdb_path)

# Create temp dir for merged mosaics
merged_dir = mosaic.cdb_path + "_temp"

# Merge input_files into output_file using GDAL
# Don't do anything if output_file already exists
def gdal_merge(input_files, output_file, merge_strategy = :lossless)
  return nil if input_files.length == 0
  return CDBTool.link_output(input_files[0], output_file) if input_files.length == 1

  command = case merge_strategy
  when :lossless
    "gdal_merge.py -o #{output_file} -co BIGTIFF=YES -co COMPRESS=LZW -co NUM_THREADS=ALL_CPUS -co TILED=YES -n 0 #{input_files.join(" ")}"
  when :lossy
    "gdal_merge.py -o #{output_file} -co BIGTIFF=YES -co COMPRESS=JPEG -co TILED=YES #{input_files.join(" ")}"
  end

  merge = Mixlib::ShellOut.new(command, live_stdout: $stdout, live_stderr: $stderr)

  if File.exists?(output_file)
    puts "Output exists, skipping merge command."
  else
    puts command
    merge.run_command
    log("#{output_file},#{File.size(output_file)},#{merge.execution_time}s")
  end
end

CDBTool.mkdirp(merged_dir)
final_dir = File.join(merged_dir, "final")
CDBTool.mkdirp(final_dir)

# Sort groups by string name, then chunk them based on the string id. This
# groups datasets with the same name from different GeoCells.
# Group - Array
# 0 => dataset ID
# 1 => Array of datasets
cdb.datasets.sort { |a,b| a.id <=> b.id }.chunk { |dataset| dataset.id }.each do |group|
  dataset_id = group.at(0)
  datasets = group.at(1)

  case dataset_id
  when "004_Imagery"
    dataset_filetype = "jp2"
    merge_strategy = :lossy
  else
    dataset_filetype = "tif"
    merge_strategy = :lossless
  end

  # Merge UREF data in each dataset, only selecting rasters from the highest
  # LOD in each dataset.
  datasets.each do |dataset|
    puts dataset.geocell + "-" + dataset.id

    # pick highest LOD, or LC if only LOD
    lod = dataset.highest_lod

    # mosaic files in each UREF
    uref_rasters = lod.urefs.collect do |uref|
      puts "\tUREF: #{uref.id}"
      uref_group = [dataset.geocell, dataset.id, lod.id, uref.id].join("-")
      output_file = File.join(merged_dir, "UREFs", uref_group + ".tif")
      CDBTool.mkdirp(File.join(merged_dir, "UREFs"))

      rasters = uref.entries("/*.#{dataset_filetype}")
      if rasters.count == 0
        puts "\t\tNo rasters found."
        nil
      else
        puts "\t\trasters: #{rasters.count}"
        gdal_merge(rasters, output_file, merge_strategy)
        output_file
      end
    end

    # Mosaic every UREF under an LOD into a single image
    # (Does this work if both geotiffs and jp2s are present?)
    dataset_group = [dataset.geocell, dataset.id].join("-")
    dataset_output = File.join(merged_dir, "datasets", dataset_group + ".tif")
    CDBTool.mkdirp(File.join(merged_dir, "datasets"))

    if uref_rasters.compact.count == 0
      puts "\tNo UREF rasters to merge."
    else
      gdal_merge(uref_rasters.compact, dataset_output, merge_strategy)
    end
  end

  final_output = File.join(final_dir, dataset_id + ".tif")

  input_files = datasets.collect do |dataset|
    dataset_group = [dataset.geocell, dataset.id].join("-")
    File.join(merged_dir, "datasets", dataset_group + ".tif")
  end

  if input_files.length > 0
    gdal_merge(input_files, final_output, merge_strategy)
  end
end

puts "Output in #{final_dir}"
