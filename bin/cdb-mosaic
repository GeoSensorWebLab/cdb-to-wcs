#!/usr/bin/env ruby

require "bundler/setup"
require "cdb"
require "cdbtool"
require "mixlib/shellout"

class CDBMosaic < CDBTool::CLI
  def help_info
    "Mosaic coverages in a CDB"
  end
end

$mosaic = CDBMosaic.new
options = $mosaic.parse(ARGV)

cdb = CDB::CDB.new($mosaic.cdb_path)

# Create temp dir for merged mosaics
merged_dir = $mosaic.cdb_path + "_temp"

# Merge input_files into output_file using GDAL
# Don't do anything if output_file already exists
def gdal_merge(input_files, output_file, merge_strategy = :lossless)
  return nil if input_files.length == 0
  return CDBTool.link_output(input_files[0], output_file) if input_files.length == 1

  command = case merge_strategy
  when :lossless
    "gdal_merge.py -o #{output_file} -co BIGTIFF=YES -co COMPRESS=LZW -co NUM_THREADS=ALL_CPUS -co TILED=YES -n 0 -a_nodata 0 #{input_files.join(" ")}"
  when :lossy
    "gdal_merge.py -o #{output_file} -co BIGTIFF=YES -co COMPRESS=JPEG -co TILED=YES #{input_files.join(" ")}"
  end

  merge = Mixlib::ShellOut.new(command, live_stdout: $stdout, live_stderr: $stderr)

  if File.exists?(output_file)
    puts "Output exists, skipping merge command."
  else
    puts command
    merge.run_command
    $mosaic.log("#{output_file},#{File.size(output_file)},#{merge.execution_time}s")
  end
end

CDBTool.mkdirp(merged_dir)
final_dir = File.join(merged_dir, "final")
CDBTool.mkdirp(final_dir)

# Group by datasets (collecting datasets from different geocells together),
# then break down into sub-groups based on Component Selectors and UREFs
cdb.datasets.sort_by { |x| x.id }.chunk { |x| x.id }.each do |group|
  dataset_id = group.at(0)
  datasets = group.at(1)

  case dataset_id
  when "004_Imagery"
    dataset_filetype = "jp2"
    merge_strategy = :lossy
  else
    dataset_filetype = "tif"
    merge_strategy = :lossless
  end

  # Collect all files under the highest LOD
  all_files = datasets.collect { |dataset|
    dataset.highest_lod.urefs.collect { |uref|
      uref.entries.collect { |e| CDB::CDBFile.new(e) }.flatten
    }.flatten
  }.flatten

  # Group files by CS1, CS2, then UREF.
  # Grouped by UREF to avoid merging too many files at once.
  components = {}
  all_files.each do |file|
    cs1 = file.fields.at(2)
    cs2 = file.fields.at(3)
    uref = file.fields.at(5)

    components[cs1] ||= {}
    components[cs1][cs2] ||= {}
    components[cs1][cs2][uref] ||= []
    components[cs1][cs2][uref].push(file)
  end

  # Merge at lowest group level, then move up the list
  components.sort.each do |cs1, cs2s|
    cs2s.sort.each do |cs2, urefs|

      # Collect rasters from merging UREFs. Compact to remove null values.
      uref_mosaics = urefs.collect { |uref, files|
        puts "#{dataset_id}-#{cs1}-#{cs2}-#{uref}"
        puts files.count

        uref_group = [dataset_id, cs1, cs2, uref].join("-")
        uref_output = File.join(merged_dir, "UREFs", uref_group + ".tif")
        CDBTool.mkdirp(File.join(merged_dir, "UREFs"))

        # Only collect rasters of types for this dataset
        rasters = files.collect { |f|
          if f.id.include?(dataset_filetype)
            f.path
          end
        }.compact
        if rasters.count == 0
          puts "  No compatible rasters found."
          nil
        else
          puts "  Rasters: #{rasters.count}"
          gdal_merge(rasters, uref_output, merge_strategy)
          uref_output
        end
      }.compact # urefs

      # Merge rasters from different UREFs in the same CS2.
      if uref_mosaics.count > 0
        cs2_group = [dataset_id, cs1, cs2].join("-")
        cs2_output = File.join(merged_dir, "final", cs2_group + ".tif")
        puts "  Merging UREFs under same Component Selectors"
        gdal_merge(uref_mosaics, cs2_output, merge_strategy)
      end

    end # cs2
  end # cs1
  puts ""
end

puts "Output in #{final_dir}"
